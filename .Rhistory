plot_file_name=plot_file_name[complete.cases(plot_file_name),]
plot(plot_file_name$sulfate, plot_file_name$nitrate)
}
}
mean_function("specdata")
plotting("specdata")
#question 1
readfiles<- function(id = 1:332,directory) {
if(!length(grep(directory,getwd()))>0)
{
setwd(file.path(getwd(), directory))
}
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  header = T, na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  header = T, na.strings=c("NA","NaN", " "))
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),header = T, na.strings=c("NA","NaN", " "))
}
return(data)
}
}
myfunction <-function(data,pollutant)
{
if(tolower(pollutant)=="nitrate"){
result_nitrate = mean(data$nitrate, na.rm = TRUE)
return(result_nitrate)
}
else if(tolower(pollutant) == "sulfate"){
result_sulfate = mean(data$sulfate, na.rm = TRUE)
return(result_sulfate)
}
}
#' @export
mean_function <- function(directory){
Path <- readline(prompt = "Enter the path of the folder specdata: ")
setwd(Path)
monitor <- as.integer(readline(prompt="Enter monitor : "))
pollutant = readline(prompt = "Enter the pollutant has to be either nitrate or sulfate: ")
if(monitor>=1 && monitor<=332){
data = readfiles(monitor,directory)
if(tolower(pollutant)=="sulfate" || tolower(pollutant)=="nitrate"){
mean_of_pollutant=myfunction(data, pollutant)
print(mean_of_pollutant)
}else {
print ("Pollutant has to be either sulfate or nitrate")
}
} else {
print("Monitor out of range")
}
}
#Question 2
#' @export
parentfunction <- function(directory)
{
Path <- readline(prompt = "Enter the path of the folder specdata: ")
setwd(Path)
if(!length(grep(directory,getwd()))>0)
{
setwd(file.path(getwd(), directory))
}
threshold = readline(prompt = "Enter the threshold: ")
threshold = as.integer(threshold)
correlation_cal <- function(filename)
{
data =read.csv(file.path(getwd(),filename))
data = data[complete.cases(data),]
no_rows=nrow(data)
if(no_rows > threshold)
{
correlation =cor(data$sulfate,data$nitrate,use="complete.obs")
return (correlation)
}
}
a=lapply(list.files(getwd()),correlation_cal)
a=unlist(a)
print(a)
if(is.null(a))
{
x <- vector(mode="numeric", length=0)
x
}
}
#Question 3
#' @export
plotting <- function(directory)
{
Path <- readline(prompt = "Enter the path of the folder specdata: ")
setwd(Path)
if(!length(grep(directory,getwd()))>0)
{
setwd(file.path(getwd(), directory))
}
threshold = readline(prompt = "Enter the threshold: ")
threshold = as.integer(threshold)
plot_function <- function(filename)
{
data =read.csv(file.path(getwd(),filename))
data = data[complete.cases(data),]
no_rows=nrow(data)
if(no_rows > threshold)
{
return(filename)
}
}
a=lapply(list.files(getwd()),plot_function)
a=unlist(a)
if(!is.null(a))
{
print(a)
read_file = sample(a,1)
print("File that has been picked up")
print(read_file)
plot_file_name = read.csv(read_file)
plot_file_name=plot_file_name[complete.cases(plot_file_name),]
plot(plot_file_name$sulfate, plot_file_name$nitrate)
}
}
install.packages("C:/Users/Akshat/Desktop/Machine Learning/Assignment1Akshat_0.1.0.tar.gz",repos= NULL , type="source")
require(Assignment1Akshat)
Assignment1Akshat::mean_function("specdata")
remove.packages(Assignment1Akshat)
remove.packages(Assignment1Akshat,"C:/Users/Akshat/Desktop/Machine Learning")
remove.packages(Assignment1Akshat_0.1.0.tar.gz,"C:/Users/Akshat/Desktop/Machine Learning")
install.packages("C:/Users/Akshat/Desktop/Machine Learning/Assignment1_Akshat_0.1.0.tar.gz", repos = NULL , type = "source")
require(Assignment1Akshat)
Assignment1Akshat::mean_function("specdata")
Assignment1Akshat::parentfunction("specdata")
Assignment1Akshat::plotting("specdata")
print(setwd)
A= matrix(data  = c(1,2,4,8,1,0,7,1,1,0,0,3), ncol = 4)
dim(A)
B = matrix (data=c(5,4,3,2,1,0,7,8,1,0,0,0,9,5,6,3,5,1,4,7,5), ncol =5)
dim(B)
C =  matrix(data =c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), ncol =5)
for(i in 1:nrow(A)){
for(j in 1:ncol(B))
{
for(k in 1:nrow(C))
{
C[i,j] = C[i,j] + A[i,k]*B[k,j]
}
}
}
C
A
B
A= matrix(data  = c(1,2,4,8,1,0,7,1,1,0,0,3), ncol = 4)
dim(A)
B = matrix (data=c(5,4,3,2,1,0,7,8,1,0,0,9,5,6,3,5,1,4,7,5), ncol =5)
dim(B)
C =  matrix(data =c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), ncol =5)
for(i in 1:nrow(A)){
for(j in 1:ncol(B))
{
for(k in 1:nrow(C))
{
C[i,j] = C[i,j] + A[i,k]*B[k,j]
}
}
}
C
A
B
A= matrix(data  = c(1,2,4,8,1,0,7,1,1,0,0,3), ncol = 4)
dim(A)
B = matrix (data=c(5,4,3,2,1,0,7,8,1,0,0,9,5,6,3,5,1,4,7,5), ncol =5)
dim(B)
C =  matrix(data =c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), ncol =5)
for(i in 1:nrow(A)){
for(j in 1:ncol(B))
{
for(k in 1:nrow(B))
{
C[i,j] = C[i,j] + A[i,k]*B[k,j]
}
}
}
C
require('e1071')
simple <- read.csv("C:/Users/Akshat/Downloads/simple.csv")
View(simple)
data(iris)
dim(iris)
iris
summary(iris)
ToyotaPrices <- read.csv("C:/Users/Akshat/Downloads/ToyotaPrices.csv")
View(ToyotaPrices)
require('e1071')
require('e1071')
ToyotaPrices = read.csv("C:/Users/Akshat/Downloads/ToyotaPrices.csv")
set.seed(500)
#sample 50%, 75%, and 85% of the data for training.
idxTrain <- sample(nrow(ToyotaPrices),as.integer(nrow(ToyotaPrices)*0.50))
train.ToyotaPrices = iris[idxTrain,]
test.ToyotaPrices = iris[-idxTrain,]
colnames(iris)
start <- proc.time()
model = svm(ToyotaPrices$Price ~ ToyotaPrices$Mfg_Month + ToyotaPrices$Mfg_Year + ToyotaPrices$KM + ToyotaPrices$HP + ToyotaPrices$Automatic + ToyotaPrices$cc + ToyotaPrices$Doors + ToyotaPrices$Cylinders + ToyotaPrices$Gears + ToyotaPrices$Quarterly_Tax + ToyotaPrices$Weight + ToyotaPrices$Mfr_Guarantee + ToyotaPrices$Radio , data = train.ToyotaPrices)
pred = predict(model,test.ToyotaPrices[,-2])
proc.time()-start
accuracy = sum(diag(table(test.iris$Species,pred)))/nrow(test.iris)
idxTrain <- sample(nrow(ToyotaPrices),as.integer(nrow(ToyotaPrices)*0.50))
train.ToyotaPrices = ToyotaPrices[idxTrain,]
test.ToyotaPrices = ToyotaPrices[-idxTrain,]
colnames(ToyotaPrices)
start <- proc.time()
model = svm(ToyotaPrices$Price ~ ToyotaPrices$Mfg_Month + ToyotaPrices$Mfg_Year + ToyotaPrices$KM + ToyotaPrices$HP + ToyotaPrices$Automatic + ToyotaPrices$cc + ToyotaPrices$Doors + ToyotaPrices$Cylinders + ToyotaPrices$Gears + ToyotaPrices$Quarterly_Tax + ToyotaPrices$Weight + ToyotaPrices$Mfr_Guarantee + ToyotaPrices$Radio , data = train.ToyotaPrices)
pred = predict(model,test.ToyotaPrices[,-2])
proc.time()-start
accuracy = sum(diag(table(test.ToyotaPrices$Price,pred)))/nrow(test.ToyotaPrices)
summary(ToyotaPrices)
model = svm(ToyotaPrices$Price ~ ToyotaPrices$Mfg_Month + ToyotaPrices$Mfg_Year + ToyotaPrices$KM + ToyotaPrices$HP + ToyotaPrices$Automatic + ToyotaPrices$cc + ToyotaPrices$Doors + ToyotaPrices$Cylinders + ToyotaPrices$Gears + ToyotaPrices$Quarterly_Tax + ToyotaPrices$Weight + ToyotaPrices$Mfr_Guarantee + ToyotaPrices$Radio , data = train.ToyotaPrices)
require('e1071')
data(iris)
dim(iris)
set.seed(500)
#sample 50%, 75%, and 85% of the data for training.
idxTrain <- sample(nrow(iris),as.integer(nrow(iris)*0.50))
train.iris = iris[idxTrain,]
test.iris = iris[-idxTrain,]
colnames(iris)
start <- proc.time()
model = svm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width , data = train.iris)
pred = predict(model,test.iris[,-5])
proc.time()-start
accuracy = sum(diag(table(test.iris$Species,pred)))/nrow(test.iris)
#==========================================================================================================================
accuracy
start <- proc.time()
model = svm(ToyotaPrices$Price ~ ToyotaPrices$Mfg_Month + ToyotaPrices$Mfg_Year + ToyotaPrices$KM + ToyotaPrices$HP + ToyotaPrices$Automatic + ToyotaPrices$cc + ToyotaPrices$Doors + ToyotaPrices$Cylinders + ToyotaPrices$Gears + ToyotaPrices$Quarterly_Tax + ToyotaPrices$Weight + ToyotaPrices$Mfr_Guarantee + ToyotaPrices$Radio,scale = FALSE , data = train.ToyotaPrices)
pred = predict(model,test.ToyotaPrices[,-2])
proc.time()-start
accuracy = sum(diag(table(test.ToyotaPrices$Price,pred)))/nrow(test.ToyotaPrices)
accuracy = sum(diag(test.ToyotaPrices$Price,pred))/nrow(test.ToyotaPrices)
accuracy
test.ToyotaPrices$Price
table(test.ToyotaPrices$Price,pred)
ToyotaPrices = na.omit(ToyotaPrices)
idxTrain <- sample(nrow(ToyotaPrices),as.integer(nrow(ToyotaPrices)*0.50))
train.ToyotaPrices = ToyotaPrices[idxTrain,]
test.ToyotaPrices = ToyotaPrices[-idxTrain,]
colnames(ToyotaPrices)
start <- proc.time()
model = svm(ToyotaPrices$Price ~ ToyotaPrices$Mfg_Month + ToyotaPrices$Mfg_Year + ToyotaPrices$KM + ToyotaPrices$HP + ToyotaPrices$Automatic + ToyotaPrices$cc + ToyotaPrices$Doors + ToyotaPrices$Cylinders + ToyotaPrices$Gears + ToyotaPrices$Quarterly_Tax + ToyotaPrices$Weight + ToyotaPrices$Mfr_Guarantee + ToyotaPrices$Radio,scale = FALSE , data = train.ToyotaPrices)
pred = predict(model,test.ToyotaPrices[,-2])
proc.time()-start
accuracy = sum(diag(table(test.ToyotaPrices$Price,pred))/nrow(test.ToyotaPrices)
>
?
;
accuracy = sum(diag(table(test.ToyotaPrices$Price,pred)))/nrow(test.ToyotaPrices)
require(faraway)
data(pima)
dim(pima)
colnames(pima)
summary(pima)
pima$test = as.factor(pima$test)
summary(pima)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.50))
train.iris = pima[idxTrain,]
test.iris = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.iris)
pred = predict(model,test.iris[,-9])
proc.time()-start
accuracy = sum(diag(table(test.iris$test,pred)))/nrow(test.iris)
accuracy
require(faraway)
require('e1071')
data(pima)
dim(pima)
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
#sample 50%, 75%, and 85% of the data for training.
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.85))
train.iris = pima[idxTrain,]
test.iris = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.iris)
pred = predict(model,test.iris[,-9])
proc.time()-start
accuracy = sum(diag(table(test.iris$test,pred)))/nrow(test.iris)
accuracy
summary(pima)
mushrooms <- read.csv("C:/Users/Akshat/Downloads/mushrooms.csv")
View(mushrooms)
mushrooms <- read.csv("C:/Users/Akshat/Downloads/mushrooms.csv")
dim(mushrooms)
summary(mushrooms)
mushrooms <- read.csv("C:/Users/Akshat/Downloads/mushrooms.csv")
dim(mushrooms)
set.seed(174007425)
summary(mushrooms)
#sample 50%, 75%, and 85% of the data for training.
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.50))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ .-class, data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
summary(mushrooms)
model = svm(class ~ ., data = train.mushrooms)
model = svm(class ~ .-veil.type, data = train.mushrooms)
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy
set.seed(100)
summary(mushrooms)
#Part 1
#sample 50% of the data for training.
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.50))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
#sample 50%, 75%, and 85% of the data for training.
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.85))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.iris)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy = sum(diag(table(test.pima$test,pred)))/nrow(test.iris)
accuracy
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.50))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.60))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.80))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.50))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy_50 = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy_50
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.50))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy_50 = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy_50
proc.time()-start
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.50))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy_50 = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy_50
set.seed(174007425)
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.60))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy_60 = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy_60
set.seed(174007425)
idxTrain <- sample(nrow(mushrooms),as.integer(nrow(mushrooms)*0.80))
train.mushrooms = mushrooms[idxTrain,]
test.mushrooms  = mushrooms[-idxTrain,]
colnames(mushrooms)
start <- proc.time()
model = svm(class ~ cap.shape + cap.surface + cap.color+ bruises + odor + gill.attachment + gill.spacing + gill.size + gill.color + stalk.shape + stalk.root + stalk.surface.above.ring + stalk.surface.below.ring + stalk.color.above.ring + stalk.color.below.ring + veil.color + ring.number + ring.type + spore.print.color + population + habitat , data = train.mushrooms)
pred = predict(model,test.mushrooms[,-1])
proc.time()-start
accuracy_80 = sum(diag(table(test.mushrooms$class,pred)))/nrow(test.mushrooms)
accuracy_80
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.50))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
require(faraway)
require('e1071')
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.50))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy
summary(pima)
data(pima)
summary(pima)
pima$test = as.factor(pima$test)
summary(pima)
set.seed(174007425)
data(pima)
summary(pima)
pima$test = as.factor(pima$test)
summary(pima)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.50))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy50 = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy50
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.60))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy60 = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy60
set.seed(174007425)
summary(pima)
pima$test = as.factor(pima$test)
idxTrain <- sample(nrow(pima),as.integer(nrow(pima)*0.80))
train.pima = pima[idxTrain,]
test.pima  = pima[-idxTrain,]
colnames(pima)
start <- proc.time()
model = svm(test ~ pregnant + glucose + diastolic + triceps + insulin + bmi + diabetes + age , data = train.pima)
pred = predict(model,test.pima[,-9])
proc.time()-start
accuracy80 = sum(diag(table(test.pima$test,pred)))/nrow(test.pima)
accuracy80
